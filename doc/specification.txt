                JTAG REQUIREMENTS SPECIFICATION DOCUMENT
               ******************************************


DOCUMENT HISTORY:
-- $Log: specification.txt,v $
-- Revision 1.3  2003-07-15 17:06:54  scottl
-- Created section 6 discussing major data structure used, plus various updates
-- throughout the rest of the document.
--
-- Revision 1.2  2003/06/13 20:44:54  scottl
-- Fixes and corrections based on discussion with Sam
--
-- Revision 1.1.1.1  2003/06/11 17:52:21  scottl
-- Initial Version
--


1. INTRODUCTION
---------------

1.1 Purpose: 
    This document is intended to capture all specifications and
    functionality required of a software application used to identify and
    tag various components of scanned journal articles.

1.2 Overview:
    The jtag application software will be designed with the goal of allowing a
    user to load and display scanned image representations of journal articles
    so that different portions can be selected and classified by the user.  
    These portions will include (but are not limited to) body text, equations, 
    images, headers, tables, titles, and page numbers etc.  By keeping track 
    of these classifications, we should then be able to build up a corpus of 
    data that can be used to train a computer to automatically classify 
    new journal articles into various components.

    The machine learning algorithms used to automatically classify the 
    components of a journal image page will be rolled into a separate 
    application which jtag will interact with.  The jtag application will
    send the journal currently being displayed to this application for 
    automatic classification, then interpret the results from that application
    to display to the user the classifications it predicted.  The user can then 
    look through the classified journal and make any necessary corrections 
    manually.  The user can also choose to turn off classification suggestions
    and make their own classifications without aid of the external application.


2. MAJOR FUNCTIONALITY
----------------------

2.1 Display image representations of scanned journal articles
    * should handle various image formats (tiff, jpg, bmp, etc.)
      - Use Img package since it supports all of the above transparently
    * should have the ability to zoom in/out of the displayed image
    * provide scrollbars to navigate over portions of the image if it is
      too large to fit in the window
    * must be able to flip between pages in multiple page images (note that
      separate functionality will be provided to break up such images into 
      multiple files -- see 2.7)

2.2 Select and "Crop" any portion of the displayed journal with the mouse
    * work with quadrilaterals only
    * 2 different modes:
      - typical "crop" to make a complete bounding box
      - simple horizontal selection.  Bound by page width to create bounding
        box
    * ability to redo or refine selection
    * ensure that selections are unique, and that no pixels are classified
      two or more times
    * store x,y co-ords of selection.  Since always square, need 4 #'s
      x_left, x_right, y_min, y_max.  Use UNIX conv. 0,0 = top left corner
    * store time to make each selection + time to classify selection (move it
      to a bucket) by timestamping each event
    * display cropped selection in default colour (black) until it has
      been classified (moved to a bucket)

2.3 Classify selected portion
    * "buckets" around document setup so that selections can be dragged over
       them (each bucket represents a different journal component)
    * bucket border width should change when a selection can be placed over
      it (selection itself will be a small icon)
    * must be able to configure (add/remove) buckets (through config file on
      startup only)
    * use of colour coding for each bucket/selection
    * ability to reclassify selections.  Make a classified selection active by
      clicking on it, then drag to a new bucket to reclassify.
    * store number of times selection was reclassified (user changed bucket)
    * Must save selections between iterations of opening and closing file
      (See section 5)

2.4 Display selections made
    * Should be able to display all selections made so far
    * Will use colour coding to show what each selection has been classified as

2.5 Read in Configuration Data from a file on startup
    * when loading selection data, look for config data in that same file
    * on program startup look in current directory, then $HOME for a file
      named .jconfig
    * if not found, load some default set of config options
    * Data in config file will include:
      - list of valid classification types and their associated colour
      - default selection mode (crop vs. simple)
      - default output directory / filename suffix
      - turn on/off look-ahead feature (see 2.8)

2.6 Store current classifications efficiently in memory, dump to file on
    save/exit
    * When user changes active selection, must be able to retrieve the 
      selection based on where user clicks with mouse
    * Write to disk in order of top left corner pos, x value, then y value
    * See section 5 for output file format
    * See section 6.1 for data structure used while storing in memory

2.7 Break multiple page images (single file), into a series of single page
    images (multiple files)
    * Should be handled externally (in a separate application ex. tiffsplit)

2.8 Use selections made in previous pages, to look ahead and predict tags
    for future pages.
    * feature not required in initial version, but will be implemented in time
    * will make use of calls to helper application


3. CONSTRAINTS
--------------

3.1 Platform / Software / Libraries
    * Must run on CSLab machines (Red Hat Linux)
    * Write in Tcl/Tk (version 8.4 has been used and tested)
      - Will require Img package (for displaying image files) libimg1.2.so
      - Img in turn requires libtiff.so, libjpeg.so, libpng.so etc.
    * BLT used for drag and drop functionality (version 2.4 tested)
    * crc::cksum package 1.0.1 used to uniquely identify images.
    * ImageMagick's identify application used to aid in determining image
      type.  It will be distributed with the application in the bin dir.

3.2 Must save selections between invocations of program on given file
    * Make use of output file, written to disk on program termination.  See 
      section 5
    * Look for such a file upon program startup.  If found, load selections
      on to image to be displayed


4. CONFIGURATION FILE FORMAT
----------------------------

4.1 File Name
    * .jconfig

4.2 Location
    * Will be searched for in current directory, and if not found, in $HOME
    * If not found at either place, a default configuration will be loaded

4.3 Contents
    * All leading blank characters (space/tab/newline) will be discarded
      when processing a line
    * Any line with a '#' character will be treated as a comment, and have
      all characters after it on the same line discarded

    4.3.1 Header Info
    *? Anything necessary??

    4.3.2 Body Info
    * First line will contain 'mode=' followed by a string representing
      the default mode.  Valid values are "crop" or "simple"
    * Second line will contain settings for default window resolution,
      default canvas size, and default bucket size @@@change this
    * Next lines will contain a 'classifiers=(' followed by a list of 
      classification types, each of which has a name then some whitespace 
      followed by a colour representing the colour selections of that type 
      will be displayed as.  Each list item may span multiple 
      lines.  End when closing ')' is reached.  Each classification type 
      is a string representing what a portion of the journal may be.  e.x.
           classifiers=(  text blue
                          equation    red
                   title green
                       graph orange   )
    *? Other configuration attributes??


5. OUTPUT FILE FORMAT
---------------------

5.1 Name
    * <in_file_name_prefix>.jtag
    * <in_file_name_prefix>.jlog

5.2 Location
    * Same directory as input file

5.3 Contents
    * All leading blank characters (space/tab/newline) will be discarded
      when processing a line
    * Any line with a '#' character will be treated as a comment, and have
      all characters after it on the same line discarded

    5.3.1 Header Info
    * First line contains 'img=' followed by the associated image file name
    * Second line contains 'type=' followed by the image file type (tiff/bmp)
    * Third line contains 'resolution=' followed by the image resolution (in 
      pixels e.x. 640x480)
    * Fourth line contains 'cksum=' followed by a checksum of the associated 
      image file
    * Next lines are optional, and if present they contain configuration data 
      used to make these selections, and are of the exact same format as seen 
      in 4.3.2.  This data will override any information in any .jconfig files
      currently loaded.

    5.3.2 Body Info (.jtag file) Repeated 0 or more times -- each represents
      a single selection
    * First line contains a separator of '---'
    * Second line contains 'class=' followed by the classification type name
      e.x. text or title
    * Third line should contain 'pos=' followed by a series of 4 whitespace
      separated numbers representing selection co-ords (normalized by image
      resolution)
    * Fourth line should contain 'mode=' followed by a string representing the
      mode used ("crop" or "simple")
    *? Anything else??

    5.3.3 Body Info (.jlog file) Repeated 0 or more times -- each represents
      a single selection
    * First line contains 'pos=' followed by a series of 4 whitespace
      separated numbers representing selection co-ords (normalized by image
      resolution)
    * Second line contains 'sel_time=' followed by a decimal number
      representing the time in seconds to make the final bounding box selection 
      This includes edit and refinement time.
    * Third line should contain 'class_attempts=' followed by a positive 
      integer representing the total number of classification attempts
      made (i.e. if placed in a bucket, then later changed to another).  Must
      be >= 1
    * Fourth line should contain class_time=' followed by the total time taken 
      to classify the selection (i.e. once bounding box created, the time 
      required to drag the selection over a bucket).  Must add time, each time 
      a selection is reclassified -- moved from one bucket to another
    *? Anything else??


6. MAJOR DATA STRUCTURES
------------------------

6.1 Classification data representation

    6.1.1 Diagram
    data              $data(class1)
    +-----------+     +--------+----------+--------+     +------+
    | class1 o--+---->| colour | num_sels | sel1 o | ... | seln |
    +-----------+     +--------+----------+------|-+     +------+
         .                                       |
         .         $data(class1,sel1)            v
         .        +----+----+----+----+----+------+----------+---------+-------+
    +-----------+ | id | x1 | y1 | x2 | y2 | mode | sel_time | cl_time | attmpt|
    | classn    | +----+----+----+----+----+------+----------+---------+-------+
    +-----------+

    6.1.2 Description
    * Top level component in the structure is an associative array called 'data'
      containing the entries class1 ... classn, each of which is labelled
      according to its classifier name (ex. body_text).
    * Each of the classx entries is also an associative array containing a 
      minimum of two elements.  One of which is the colour of the classifier,
      and the second is the number of selections currently existing for that 
      classifier.  The remaining elements in the array represent the selections 
      made thus far (there should be num_sels of these), and are indexed 
      starting at 1.  
    * Each of the selections is a list containing exactly 9 ordered
      elements.  These elements are (in the order in which they appear in the
      list): 'id' the unique id given to the rectangle when it is created on 
      the canvas, 'x1' the pixel of the left edge of the selection (normalized 
      to actual image resolution), 'y1' the pixel of the top edge, 'x2' the 
      pixel of the right edge, 'y2' the pixel of the bottom edge, 'mode' the 
      selection mode used (crop/simple) to create the rectangle, 'sel_time' 
      the total time in seconds to create/refine the dimensions of the 
      rectangle, 'cl_time' the total time in seconds to drag the selection to 
      a classification bucket, 'attempts' the number of times the selection 
      has been classified/reclassified.

   6.1.3 Referencing
   * Tcl/Tk does not allow nested or multi-dimensional array structures, so a 
     hack is used whereby multi-dimensional arrays are simulated by adding a 
     comma between dimension element names i.e.  $data(dim1e,dim2e,dim3e) is 
     used.  Not that this is in actual fact a single dimensional array element
     with an element name of "dim1e,dim2e,dim3e".  Therefore care must be
     taken to ensure that there is no whitespace anywhere in the name of the
     elements.
   * To reference the list containing selection data for the 4th selection of
     the body_text classifier, you would use the following: 
     $data(body_text,4) .  You can then use lindex on the item returned to 
     pick out particular components of the selection ex.  to get the mode 
     (item 6) use [lindex data(body_text,4) 5] since lists start numbering at 0.
