IDEAS FOR SEGMENTATION
----------------------

1. Create a generalized "BEST CUT" algorithm:
-While some cut gets the minimum score:
    -Create a list of possible cuts
    -Evaluate each cut based on some criteria
    -Make the best cut

2. Implement the original XYCUT evaluation criteria for the
   BESTCUT algorithm:
-Score is the "width" of the valley in the horizontal or
 vertical projection.
-Minimum score is MINY for vertical and MINX for
 horizontal.

3. Improve XYCUT in the following manner:
-Score is:
    -For horizontal projection, "width"/H
    -For vertical projection, "width"/V
-Find the optimal settings so that minimum score is 1.

4. Learn the values of H and V for a given journal:
-H and V can also be expressed as SIZE and RATIO.
    -H = SIZE * COS(RATIO)
    -V = SIZE * SIN(RATIO)
-For any given RATIO value, you can test all SIZE values
 concurrently, by recording the status after each cut.
-Test out a collection of reasonable RATIO values, and
 select the best one


5. Turn the problem into a Boltzmann machine:
-Find all the individual marks
-Possibly do some pre-processing to merge together or eliminate
 any marks that are too small
-Create boolean variables for whether it should be connected
 with its upper, lower, left, and right neighbours.
-Try to optimize for some score by changing these boolean variables.
    -Would the topic of Simon's talk be appropriate/helpful?


6. Learn To Cut Algorithm:
-Find some heuristic to identify "possible cuts".  Create a set of
 features for the proposed cut.  Learn a classifier to decide "cut" 
 or "no cut" for each.


7. Learn To Merge Algorithm:
-Same as learn the cuts, but learns the merges instead.
-This could be slow, given that many pages have over 2,500 marks...


8. RLSA as a pre-processing step:
-Group lines together via the Run Length Smoothing Algorithm.
-This should reduce the number of marks, allowing for faster implementations
 of a merging algorithm.


9. XYCUT as a pre-processing step:
-Run a version of XYCUT that severely over-segments
-Then run a merging algorithm


