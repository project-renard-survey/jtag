To Do
------

----------------------------------------------------
Thesis TOC Gaps:
----------------
1. Merge-based algorithms
    1.1 Voronoi
    1.2 Best-Merge
    1.3 Learn-To-Merge

2. Combined Segment/Label Evaluation

3. Applications
    3.1 OCR Pre-Processing for searchable image-documents
    3.2 OCR Pre-Processing for compression and storage
    3.3 OCR Pre-Processing for HTML
    
----------------------------------------------------

<DONE>Implement the Smearing segmentation algorithm

<DONE>Optimize and test the Smearing segmentation algorithm

Implement the best-merge algorithm

Implement Voronoi Diagrams for best-merge

Test Voronoi Diagrams for best-merge

Make some changes to create the 2nd version of Learn-To-Cut
    <DONE>Make separate classifiers for vertical and horizontal cuts.
    Add features:
        <DONE>Does the cut slice the full page cleanly?
        <DONE>Ink densities for R0, R1, and R2.
        <DONE>Top, Left, Bottom, Right of R0, R1, and R2.
            <NOPE>Boolean vars for left20%, right20%, top20%, bot20%
        <NOPE>Add a new rectangle: ws1 (whitespace before R1).
        <DONE>Last 20% of pages in article (boolean).
        <DONE>Width(r0) - Min(width(r1),width(r2))
        <DONE>Height(r0) - min(height(r1),height(r2))
    <DONE>Script to generate all training and test data sets.
    Script to test all data (lr-style).
    Script to test all data (seg-style).
    Script to show results in some nice manner.

<DONE>Script for large batch auto-tagging (pre-processor)

<DONE>Tag some more data

<NOPE>Buy a bar document scanner.

<DONE>Look into detecting lines in text regions.

<DONE>Code reflowing of a text region.

<DONE>Code reflowing of a page.

<DONE>Code reflowing of a document.

<DONE>Code changing a single-column doc into a double-column.











Consider second reader for thesis:
    -Rich Zemel
    -Brendon Frye
    -Aron Hertsmen
    -<Ron Becker>

Note MSC deadline: Jan 30th.

Think about an OCR pre-processor that blanks out the images, and says
something like "see figure1.jpg'.


Find error bars by randomly picking training and test cases for:
    Random articles:
        KNN
        LR
        MEMM
    Random pages:
        KNN
        LR
        MEMM


Consider trying to infer font size for each region, and using this as a
feature.

Check out OCR from http://rcat.utoronto.ca/

Implement MEMM
    <DONE>1. By adding booleans for previous class.
             <DONE>NOTE: Include a trailing "end-of-page" tag.
    2. By training a separate classifier for each previous class.

Implement CRF's

Think about inferring font size before doing segmentation, and using this.



