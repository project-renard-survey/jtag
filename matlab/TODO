To Do
------


<DONE>Finish the "Best Cuts" implementation of xycuts.

<DONE>Gather papers to read and write parts of my thesis

<DONE>Implement the Run-Length Smoothing Algorithm

<DONE>Implement the Smearing segmentation algorithm

Optimize and test the Smearing segmentation algorithm

Implement the best-merge algorithm

Implement Voronoi Diagrams for best-merge

Test Voronoi Diagrams for best-merge

<DONE>Implement first version of Learn-To-Cut algorithm.
    <DONE>Decide on "classes" of cuts.
    <DONE>Decide on a way to order the cuts.
    <DONE>Come up with the first basic features.
    <DONE>Write code to generate training data.
        <NOPE>Consider "optional" cuts while doing this
    <DONE>Generate some training data.
    <DONE>Train the classifier.
    <DONE>Write the cutter that uses the classifier.
    <DONE>Test the cutter and classifier.

Make some changes to create the 2nd version of Learn-To-Cut
    <DONE>Make separate classifiers for vertical and horizontal cuts.
    Add features:
        Does the cut slice the full page cleanly?
        Ink densities for R0, R1, and R2.
        Fraction of page Down and Right for center points of R0, R1, and R2.
            Boolean vars for left20%, right20%, top20%, bot20%
        Add a new rectangle: ws1 (whitespace before R1).
        Last 20% of pages in article (boolean).
        Width(r0) - Min(width(r1),width(r2))
        Height(r0) - min(height(r1),height(r2))
    Script to generate all training and test data sets.
    Script to test all data (lr-style).
    Script to test all data (seg-style).
    Script to show results in some nice manner.
        

    

Buy a bar document scanner.



Look into detecting lines in text regions.

Look into inferring font size or line spacing from text regions.

<DONE>Fix up the demo.

<DONE>Skim Ben's thesis.

Consider second reader for thesis:
    -Rich Zemel
    -Brendon Frye
    -Aron Hertsmen
    -<Ron Becker>

Note MSC deadline: Jan 30th.

Think about writing an algorithm for re-flowing a page with dif't margins.

Think about an OCR pre-processor that blanks out the images, and says
something like "see figure1.jpg'.


Find error bars by randomly picking training and test cases for:
    Random articles:
        KNN
        LR
        MEMM
    Random pages:
        KNN
        LR
        MEMM


Consider trying to infer font size for each region, and using this as a
feature.

Check out OCR from http://rcat.utoronto.ca/

Implement MEMM
    <DONE>1. By adding booleans for previous class.
             <DONE>NOTE: Include a trailing "end-of-page" tag.
    2. By training a separate classifier for each previous class.

Implement CRF's

Think about inferring font size before doing segmentation, and using this.



