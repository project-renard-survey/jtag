To Do
------

<DONE>Create a memm_fn function so that memm can be called from JTAG.

<DONE>Change the sorting function so that instead of actually rearranging
the data, it just lists the correct indecies.

<DONE>Change the memm_train function to account for the new sorting method.

<DONE>Change the memm_predict function to account for the new sorting method.

<DONE>Change the memm_add_td_label_features function to account for the new
sorting method.

<DONE>Change the lr_fn to accept the jtag_file as a parameter.

<DONE>Change the knn_fn to accept the jtag_file as a parameter.

<DONE>Test the new lr_fn

<DONE>Test the new knn_fn

<DONE>Test the new memm_predict function

<DONE>Test the new memm_fn

<DONE>Test the new memm_train function

<DONE>Change run_all_features to accept the path to the pixels file, rather than
the pixels.

Do something about the lack of a "figure" class label.  Guh, this will
take a while.

Go through all the data to deal with the "figure" solution.

Add features for:
    -Is first region on page
    -Is last region on page
    -Fraction of the way down the page, in terms of region order
    -Is first page
    -Is last page
    -In last 15% of document pages
    -Fraction of the way through the document, in terms of page #

Normalize the features in each data set before saving (do some research to make sure this is done right).

Re-extract all feature data.

Retrain all lr, knn, and memm classifiers.
Retest all lr, knn, and memm classifiers.

Train all classifiers without the "snapped" features.
Test all classifiers without the "snapped" features.





<DONE> Change the way the feature extraction functions work so that they accept all the rectangles at once, rather than one at a time.

<DONE> Make sure the above changes work.

<DONE> Add some new distance features:
  <DONE>-Height
  <DONE>-Width
  <DONE>-Area
  <DONE>-Aspect Ratio (what's the best way to do this?)
  <DONE>-distance to neighbouring regions
  <DONE>-% overlap of projection on nieghbouring features
  <DONE>-Boolean "is centered"
  <DONE>-Boolean "on (left/right/top/botton) edge"

<DONE> Debug the new features
  -Getting negative values, when we shouldn't

<DONE> Normalize the new features


<DONE> Add some "marks" features:
  <DONE>-Number of marks
  <DONE>-Ratio of # of marks to area
  <DONE>-Width of widest mark (as fraction of total?)
  <DONE>-Height of tallest mark (as fraction of total?)
  <DONE>-Area of largest mark (as fraction of total?)
  <DONE>-Pixels in largest mark

<DONE> Make the marks features reasonably quick to compute.

<DONE> Create a single train/test script

<DONE> Re-train and re-test with new features

Figure out why the marks features are decreasing performance.

<DONE>Clean up test data
    Bach02
    Cannon02
    Chickering02a
    Collobert01a
    Crammer03b

<DONE>Clean up training data
    Allwein00a
    Antos02a
    Callif03a
    Cancedda03a
    Caruana03a
    Chan02a
    Chickering02b
    Christensen03a
    Crammer01a
    Crammer03a

<DONE>Fix up "snapping" errors in test and training data

<CANCELLED>Check out OCR from http://rcat.utoronto.ca/

<CANCELLED>Check out "NCA" for KNN (talk to Jacob)



<DONE>Read about MEMM's
Implement MEMM
    <DONE>1. By adding booleans for previous class.
             <DONE>NOTE: Include a trailing "end-of-page" tag.
    2. By training a separate classifier for each previous class.

Check over the feature extraction code for:
    1. on_left_edge
    2. on_top_edge
    3. on_right_edge
    4. on_bottom_edge
    5. furthest_left
    6. h_sharpness





<DONE>Read about CRF's (Conditional Random Fields)
Implement CRF's

<DONE>Make changes requested by Sam for MS package

<DONE> Get ready to send stuff to Microsoft

<DONE> Decide on consistent style for Inline Heading, Author List, and 
References.

<DONE>Go over test data and training data, to make above items consistent.

Think about inferring font size before doing segmentation, and using this.



